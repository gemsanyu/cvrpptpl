reset;

param instance_name symbolic;

model CVRP14042025.mod;

let instance_name := "@INSTANCE@";
data ("instances/"&instance_name);

option solver gurobi;
option gurobi_options 'timelimit=@TIME_LIMIT@ bestbound=1 outlev=1';

solve >("ampl_outputs/" & instance_name & ".out");

print"-----RESULTS INFO-----">>("ampl_outputs/" & instance_name & ".out");
param mip_gap;

let mip_gap := abs(TC - TC.bestbound) / max(1, abs(TC));

print "running_time: ", _solve_elapsed_time >>("ampl_outputs/" & instance_name & ".out");
print "TC.best_bound: ", TC.bestbound>>("ampl_outputs/" & instance_name & ".out");
print "TC.best_bound: ", TC >>("ampl_outputs/" & instance_name & ".out");

print "MIP Gap (%): ", 100 * mip_gap >> ("ampl_outputs/" & instance_name & ".out");
print "=== Vehicle Routes ===" >> ("ampl_outputs/" & instance_name & ".out");
for {k in K, (i,j) in A1: x[i,j,k]==1} {
    printf "Vehicle %d: %d → %d\n", k, i, j>>("ampl_outputs/" & instance_name & ".out");
}

param cur integer;
param next integer;

printf "\n=== Full Vehicle Routes ===\n">>("ampl_outputs/" & instance_name & ".out");

for {k in K} {
  let cur := 0;
  printf "Vehicle %d: %d", k, cur >>("ampl_outputs/" & instance_name & ".out");

  repeat {
    let next := -1;

    for {j in N1: (cur,j) in A1} {
      if x[cur,j,k] > 0.5 then {
        let next := j;
        break;
      }
    }

    if next = -1 or next = 0 then {
      printf " → 0\n" >>("ampl_outputs/" & instance_name & ".out");
      break;
    } else {
      printf " → %d", next >>("ampl_outputs/" & instance_name & ".out");
      let cur := next;
    }
  }
}

print "Arc used by MRT line: y variables:">>("ampl_outputs/" & instance_name & ".out");
for {(i,j) in A2: y[i, j]==1}
{ 
    printf "MRT used: %d → %d\n", i, j>>("ampl_outputs/" & instance_name & ".out"); 
}

print "Customer assigment to PL: u variables:">>("ampl_outputs/" & instance_name & ".out");
for {i in C_S union C_F, j in L: u[i, j]==1}
{ 
    print i, j>>("ampl_outputs/" & instance_name & ".out"); 
}

print "Node is served by regular vehicle: g variables:">>("ampl_outputs/" & instance_name & ".out");
for {i in N2: g[i]==1}
{ 
    print i>>("ampl_outputs/" & instance_name & ".out"); 
}

print "Customer assigment to Home delivery: gm variables:">>("ampl_outputs/" & instance_name & ".out");
for {i in C_H union C_F: gm[i]==1}
{ 
    print i>>("ampl_outputs/" & instance_name & ".out"); 
}

print "Customer's demand delivered to PL: l variables:">>("ampl_outputs/" & instance_name & ".out");
for {i in C_S union C_F: h[i]==1}
{ 
    print i>>("ampl_outputs/" & instance_name & ".out"); 
}
